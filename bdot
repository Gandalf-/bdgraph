#!/usr/bin/python3

''' bdgraph.py

Author:
    Austin Voecks

Description:
    Reads an input markup file containing definitions, dependencies, and graph
    options, and writes a corresponding output graphviz dot file

Usage:
    python3 bdgraph.py input_file [output_file] '''

import bdgraph
import os
import sys
import time


def run(input_fn, output_fn):
    ''' string, string -> none

    @input_fn   input bdgraph file to parse
    @output_fn  file to write graphviz output to

    read in the input file, create the graph, handle user options, run graph
    operations, and write output '''

    # read contents into list
    with open(input_fn, 'r') as input_fd:
        content = input_fd.read()

    try:
        graph = bdgraph.Graph(content)
        graph.handle_options()
        graph.transitive_reduction()

        if graph.has_cycle:
            print('warn: cycle detected, not computing transitive reductions')

        graph.compress_representation()
        graph.write_dot(output_fn)

    except bdgraph.BdgraphRuntimeError as error:
        print(str(error))
        sys.exit(1)

    # rewrite the input file?
    if 'cleanup' in graph.option_strings:
        graph.write_config(input_fn)

    del graph


def main(argv):
    ''' list of string -> none

    handles IO and parses user options '''

    argc = 0
    monitor = False
    input_fn, output_fn = '', ''

    # parse commandline arguments
    if len(argv) > 0:

        if str(argv[argc]) == '-m':
            monitor = True
            argc += 1

        input_fn = str(argv[argc])
        argc += 1

        if not os.path.exists(input_fn):
            print('error: file "' + input_fn + '" does not exist')
            sys.exit(1)

        # output file name is input + .dot if not provided
        try:
            output_fn = str(argv[argc])

        except IndexError:
            output_fn = input_fn + '.dot'

    else:
        print('usage: bdot [-m] input_file [output_file]')
        sys.exit(1)

    if monitor:
        last_change = os.stat(input_fn).st_mtime

        # poll for changes to the input file
        while True:
            current = os.stat(input_fn).st_mtime

            if current != last_change:
                run(input_fn, output_fn)
                last_change = os.stat(input_fn).st_mtime

            time.sleep(0.25)

    else:
        run(input_fn, output_fn)


if __name__ == '__main__':
    main(sys.argv[1:])
